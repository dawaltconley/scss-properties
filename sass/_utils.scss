@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'var';

///
/// Decorator for css property var
///
/// @example
/// // returns var(--brand-color)
/// mkvar(--brand-color);
///
/// @param {Any} $property - Initial value
/// @return {String} - wrapper value with 'var'
///

@function mkvar($property) {
  @return string.unquote('var(#{$property})');
};

///
/// Decorator for calc
///
/// @example
/// // returns calc(var(--brand-color) + 20)
/// mkcalc('var(--brand-color) + 20');
///
/// @param {Any} $property - Initial value
/// @return {String} - wrapper value with 'calc'
///
@function mkcalc($property) {
  @return string.unquote('calc(#{$property})');
};

@function calcProperty($parameter, $colorName, $colorPart, $unit: null, $type: null) {
  $name: #{$colorName}#{$colorPart};
  $param: #{$parameter}#{$unit};

  @if ($type == var.$ADJUST) {
    @if ($parameter and math.is-unitless($parameter)) {
      @return mkcalc('#{mkvar($name)} + #{$param}');
    }

    @if ($parameter) {
      $percentile: #{1 + $parameter * 0.01};
      $percentile: str-replace($percentile, math.unit(to-number($percentile)));

      @return mkcalc('#{mkvar($name)} * #{$percentile}');
    }

    @return mkvar($name);
  }

  @if ($type == var.$CHANGE) {
    @if ($parameter and math.is-unitless($parameter)) {
      @return $param;
    }

    @if ($parameter) {
      @return #{$parameter};
    }

    @return mkvar($name);
  }

  @return null;
}

@function calcPropertyAlpha($alpha, $colorName, $type: null, $hasAlpha: null) {
  $alphaIsNumber: ($alpha or $hasAlpha) and (meta.type-of($alpha) == 'number');

  $property: mkvar(#{$colorName}#{var.$POSTFIX-ALPHA});

  @if ($type == var.$ADJUST) {
    @if ($alphaIsNumber and math.is-unitless($alpha)) {
      @return mkcalc('#{$property} + #{$alpha}');
    }

    @if ($alphaIsNumber) {
      $percentile: 1 + math.div($alpha, 100%);
      @return mkcalc('#{$property} * #{$percentile}');
    }

    @if ($hasAlpha) {
      @return $property;
    }
  }

  @if ($type == var.$CHANGE) {
    @if ($alphaIsNumber and math.is-unitless($alpha)) {
      @return $alpha;
    }

    @if ($alphaIsNumber) {
      @return #{math.div($alpha, 100%)};
    }

    @if ($hasAlpha) {
      @return $property;
    }
  }

  @return null;
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-unit($value, $unit) {
  $units: (
    '%': 1%,
    'ch': 1ch,
    'cm': 1cm,
    'deg': 1deg,
    'em': 1em,
    'ex': 1ex,
    'grad': 1grad,
    'Hz': 1Hz,
    'in': 1in,
    'kHz': 1kHz,
    'mm': 1mm,
    'ms': 1ms,
    'pc': 1pc,
    'pt': 1pt,
    'px': 1px,
    'q': 1q,
    'rad': 1rad,
    'rem': 1rem,
    's': 1s,
    'turn': 1turn,
    'vh': 1vh,
    'vmax': 1vmax,
    'vmin': 1vmin,
    'vw': 1vw,
  );
  
  @if not list.index(map.keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @if (meta.type-of($value) != 'number') {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  @if (meta.type-of($value) == 'number') {
    @return $value * map.get($units, $unit);
  }

  @return null;
};

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if meta.type-of($value) == 'number' {
    @return $value;
  } @else if meta.type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $decimal: 0;
  $d: string.index($value, '.');
  $minus: string.slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @if $d {
    $decimal: to-number(string.slice($value, $d + 1));
    $decimal: math.div($decimal, math.pow(10, string.length($value) - $d));
    $value: string.slice($value, 1, $d - 1);
  }
  
  @for $i from if($minus, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);
    $number: map.get($numbers, $character);

    @if not $number {
      $result: $result + $decimal;
      @return to-unit(if($minus, -$result, $result), string.slice($value, $i))
    }

    $result: $result * 10 + $number;
  }

  $result: $result + $decimal;
  @return if($minus, -$result, $result);;
};

/// Replace `$search` with `$replace` in `$string`
// credits: https://css-tricks.com/snippets/sass/_str-replace-function/
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);
  
  @if $index {
    @return string.slice($string, 1, $index - 1)
    + $replace
    + str-replace(
        string.slice($string, $index + string.length($search)),
          $search,
          $replace
        );
  }
  
  @return $string;
}
