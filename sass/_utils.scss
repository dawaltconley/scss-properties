@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'args';
@use 'var';

@function postfix($colorName, $colorProp) {
  $postfix: map.get(var.$PROPERTIES, $colorProp, 'postfix');
  $varName: #{$colorName}#{$postfix};
  @return var($varName);
}

@function calcProperty($parameter, $colorName, $colorProp, $type: null) {
  $valid: args.validate($type, $colorProp, $parameter);
  $property: postfix($colorName, $colorProp);
  $unit: map.get(var.$PROPERTIES, $colorProp, 'unit');
  $min: map.get(var.$PROPERTIES, $colorProp, 'min');
  $max: map.get(var.$PROPERTIES, $colorProp, 'max');

  @if $colorProp == var.$ALPHA and not map.get(var.$COLORS, $colorName, 'alpha') {
    // if targeting alpha for a color without an alpha value / variable
    @if not $parameter {
      @return null;
    }
    $property: 1;
  }

  $propIsNumber: meta.type-of($property) == 'number';
  $paramIsNumber: meta.type-of($parameter) == 'number';
  $param: if($paramIsNumber and math.is-unitless($parameter), $parameter * $unit, $parameter);

  @if ($type == var.$ADJUST) {
    // add or subtract parameter from existing value
    @if $propIsNumber and $paramIsNumber {
      @return math.clamp($min, $property + $param, $max);
    } @else if ($param) {
      @return calc(#{$property} + #{$param});
    }
    @return $property;
  }

  @if ($type == var.$CHANGE) {
    // replace existing value with parameter
    @if ($param) {
      @return $param;
    }
    @return $property;
  }

  @if ($type == var.$SCALE) {
    // scale existing value relative to its min or max
    @if $propIsNumber and $paramIsNumber {
      @return math.clamp($min, $property + math.div($param, 100%), $max);
    } @else if ($param) {
      // if $param is greater than 0, use difference from max. if less than 0, use min
      $adjust: 'max(#{$max} * max(0, #{$param}) / #{$param}, #{$property}) - max(#{$property} * max(0, #{$param}) / #{$param}, #{$min})';
      $adjust: '(#{$adjust}) * #{$param}';
      @if ($paramIsNumber) {
        // simplify css output if $param is a number
        $percentile: if($paramIsNumber, math.div($param, 100%), $param);
        $adjust: if($percentile > 0,
          '#{$max} - #{$property}',
          '#{$property} - #{$min}');
        $adjust: '(#{$adjust}) * #{$percentile}';
      }
      @return calc(#{$property} + (#{$adjust}));
    }

    @return $property;
  }

  @return null;
}

@function calcMix($colorName1, $colorName2, $weight, $colorProp, $modify: null) {
  $valid: args.validate(var.$MIX, $colorProp, $weight);
  $var1: postfix($colorName1, $colorProp);
  $var2: postfix($colorName2, $colorProp);
  @if $colorProp == var.$ALPHA {
    $hasAlpha1: map.get(var.$COLORS, $colorName1, 'alpha');
    $hasAlpha2: map.get(var.$COLORS, $colorName2, 'alpha');
    @if not $hasAlpha1 and not $hasAlpha2 {
      @return null;
    }
    $var1: if($hasAlpha1, $var1, 1);
    $var2: if($hasAlpha2, $var2, 1);
  }

  $w1: #{$weight};
  $w2: '(1 - #{$weight})';
  @if meta.type-of($weight) == 'number' {
    $w1: math.div($weight, 100%);
    $w2: 1 - $w1;
  }

  @if $modify {
    @if $var1 {
      $var1: '(#{$var1} + #{$modify})';
    } @else if $var2 {
      $var2: '(#{$var2} + #{$modify})';
    }
  }

  $expr1: if(meta.type-of($var1) == 'number' and meta.type-of($w1) == 'number', $var1 * $w1, '(#{$var1} * #{$w1})');
  $expr2: if(meta.type-of($var2) == 'number' and meta.type-of($w2) == 'number', $var2 * $w2, '(#{$var2} * #{$w2})');
  @return calc(#{$expr1} + #{$expr2});
}
