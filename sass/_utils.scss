///
/// Decorator for css property var
///
/// @example
/// // returns var(--brand-color)
/// _var(--brand-color);
///
/// @param {Any} $property - Initial value
/// @return {String} - wrapper value with 'var'
///
@function _var($property) {
  @return #{unquote('var(#{$property})')};
};

///
/// Decorator for calc
///
/// @example
/// // returns calc(var(--brand-color) + 20)
/// _calc(var(--brand-color) + 20);
///
/// @param {Any} $property - Initial value
/// @return {String} - wrapper value with 'calc'
///
@function _calc($property) {
  @return #{unquote('calc(#{$property})')};
};

@function _calcProperty($parameter, $colorName, $colorPart, $unit: null, $type: null) {
  $name: #{$colorName}#{$colorPart};
  $param: #{$parameter}#{$unit};

  @if ($type == $ADJUST) {
    @if ($parameter and unitless($parameter)) {
      @return _calc(#{_var($name) + #{$param}});
    }

    @if ($parameter) {
      $percentile: #{1 + $parameter / 100};
      $percentile: _str-replace($percentile, unit(_to-number($percentile)));

      @return _calc(#{_var($name) * #{$percentile}});
    }

    @return _var($name);
  }

  @if ($type == $CHANGE) {
    @if ($parameter and unitless($parameter)) {
      @return $param;
    }

    @if ($parameter) {
      @return #{$parameter};
    }

    @return _var($name);
  }

  @return null;
}

@function _calcPropertyAlpha($alpha, $color, $colorName, $type: null) {
  $hasAlpha: alpha($color) != 1;
  $alphaIsNumber: ($alpha or $hasAlpha) and (type-of($alpha) == 'number');

  $property: _var(#{$colorName}#{$POSTFIX-ALPHA});

  @if ($type == $ADJUST) {
    @if ($alphaIsNumber and unitless($alpha)) {
      @return _calc(#{$property} + #{$alpha});
    }

    @if ($alphaIsNumber) {
      $percentile: #{1 + $alpha / 100};
      $percentile: _str-replace($percentile, unit(_to-number($percentile)));

      @return _calc(#{$property} * #{$percentile});
    }

    @if ($hasAlpha) {
      @return $property;
    }

    @return null;
  }

  @if ($type == $CHANGE) {
    @if ($alphaIsNumber and unitless($alpha)) {
      @return $alpha;
    }

    @if ($alphaIsNumber) {
      $percentile: #{$alpha / 100};
      $percentile: _to-number(_str-replace($percentile, unit(_to-number($percentile))));

      @return $percentile;
    }

    @if ($hasAlpha) {
      @return $property;
    }

    @return null;
  }

  @return null;
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function _to-unit($value, $unit) {
  $units: (
    '%': 1%,
    'ch': 1ch,
    'cm': 1cm,
    'deg': 1deg,
    'em': 1em,
    'ex': 1ex,
    'grad': 1grad,
    'Hz': 1Hz,
    'in': 1in,
    'kHz': 1kHz,
    'mm': 1mm,
    'ms': 1ms,
    'pc': 1pc,
    'pt': 1pt,
    'px': 1px,
    'q': 1q,
    'rad': 1rad,
    'rem': 1rem,
    's': 1s,
    'turn': 1turn,
    'vh': 1vh,
    'vmax': 1vmax,
    'vmin': 1vmin,
    'vw': 1vw,
  );
  
  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @if (type-of($value) != 'number') {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  @if (type-of($value) == 'number') {
    @return $value * map-get($units, $unit);
  }

  @return null;
};

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function _to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $decimal: 0;
  $d: str-index($value, '.');
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @if $d {
    $decimal: _to-number(str-slice($value, $d + 1));
    @for $i from 1 through (str-length($value) - $d) {
      $decimal: $decimal * 0.1;
    }
    $value: str-slice($value, 1, $d - 1);
  }
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or ($character == '.')) {
      $result: $result + $decimal;
      @return _to-unit(if($minus, -$result, $result), str-slice($value, $i))
    }

    $result: $result * 10 + map-get($numbers, $character);
  }
  
  $result: $result + $decimal;
  @return if($minus, -$result, $result);;
};

/// Replace `$search` with `$replace` in `$string`
// credits: https://css-tricks.com/snippets/sass/_str-replace-function/
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function _str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1)
    + $replace
    + _str-replace(
        str-slice($string, $index + str-length($search)),
          $search,
          $replace
        );
  }
  
  @return $string;
}
