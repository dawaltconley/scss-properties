@use '../node_modules/sass-true/sass/throw';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'var';

@function guessColor($args...) {
  $kwargs: meta.keywords($args);
  $rgb: false; $hsl: false;
  $hasAlpha: map.has-key($kwargs, 'alpha') or list.length($args) == 4;
  @if not $rgb and not $hsl {
    @each $property in map.keys($kwargs) {
      @if list.index(var.$RGB, $property) {
        $rgb: true;
      } @else if list.index(var.$HSL, $property) {
        $hsl: true;
      }
    }
  }

  @if $rgb and $hsl {
    $kwarglist: list.zip(map.keys($kwargs), map.values($kwargs));
    @return throw.error('Both RGB and HSL arguments supplied: #{$kwarglist}', 'guessColor()');
  }

  @if not $rgb and not $hsl {
    $rgb: true; $i: 1;
    @while $rgb and $i <= list.length($args) {
      $a: list.nth($args, $i);
      @if meta.type-of($a) == 'number' and not math.is-unitless($a) {
        $rgb: false; $hsl: true;
      }
      $i: $i + 1;
    }
  }

  @if $hasAlpha and $rgb {
    @return 'rgba';
  } @else if $hasAlpha and $hsl {
    @return 'hsla';
  } @else if $rgb {
    @return 'rgb';
  } @else if $hsl {
    @return 'hsl';
  }

  @return null;
}

@function makeColor($args...) {
  $type: guessColor($args...);
  @if $type == 'rgba' {
    @return rgba($args...);
  } @else if $type == 'rgb' {
    @return rgb($args...);
  } @else if $type == 'hsla' {
    @return hsla($args...);
  } @else if $type == 'hsl' {
    @return hsl($args...);
  }

  @return $type;
}
