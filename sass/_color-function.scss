@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use 'var';
@use 'utils';
@use 'color' as sass-color;

$_alpha: ();
@function _hasAlpha($colorName) {
  @if not map.has-key($_alpha, $colorName) {
    @error '#{$colorName} is not a defined color.';
  }
  @return map.get($_alpha, $colorName);
}

// needs work to use alpha
// needs work to use hue in this way; averaging hue doesn't always produce desired results
// also allow mixing different values by different weights?

@function mix($colorName1, $colorName2, $weight: 50%) {
  $hue-color:        utils.calcMix($colorName1, $colorName2, $weight, var.$POSTFIX-HUE);
  $saturation-color: utils.calcMix($colorName1, $colorName2, $weight, var.$POSTFIX-SATURATION);
  $lightness-color:  utils.calcMix($colorName1, $colorName2, $weight, var.$POSTFIX-LIGHTNESS);

  @return sass-color.makeHSL($hue: $hue-color, $saturation: $saturation-color, $lightness: $lightness-color);
}

@function adjust($colorName, $hue: null, $saturation: null, $lightness: null, $alpha: null) {
  $hue-color:        utils.calcProperty($hue, $colorName, var.$POSTFIX-HUE, var.$UNIT-DEG, var.$ADJUST);
  $saturation-color: utils.calcProperty($saturation, $colorName, var.$POSTFIX-SATURATION, var.$UNIT-PERCENT, var.$ADJUST);
  $lightness-color:  utils.calcProperty($lightness, $colorName, var.$POSTFIX-LIGHTNESS, var.$UNIT-PERCENT, var.$ADJUST);
  $alpha-color:      utils.calcPropertyAlpha($alpha, $colorName, var.$ADJUST, _hasAlpha($colorName));

  @return sass-color.makeHSL($hue: $hue-color, $saturation: $saturation-color, $lightness: $lightness-color, $alpha: $alpha-color);
}

@function change($colorName, $hue: null, $saturation: null, $lightness: null, $alpha: null) {
  $hue-color:        utils.calcProperty($hue, $colorName, var.$POSTFIX-HUE, var.$UNIT-DEG, var.$CHANGE);
  $saturation-color: utils.calcProperty($saturation, $colorName, var.$POSTFIX-SATURATION, var.$UNIT-PERCENT, var.$CHANGE);
  $lightness-color:  utils.calcProperty($lightness, $colorName, var.$POSTFIX-LIGHTNESS, var.$UNIT-PERCENT, var.$CHANGE);
  $alpha-color:      utils.calcPropertyAlpha($alpha, $colorName, var.$CHANGE, _hasAlpha($colorName));

  @return sass-color.makeHSL($hue: $hue-color, $saturation: $saturation-color, $lightness: $lightness-color, $alpha: $alpha-color);
};

@mixin define($colorMap, $parent: '', $forceAlpha: true) {
  @if (meta.type-of($colorMap) == 'map') {
    @each $colorName in map.keys($colorMap) {
      $name: #{$parent}#{$colorName};
  
      @if ($colorName == 'color') {
        $name: #{$parent};
      }
  
      $color: map.get($colorMap, $colorName);
  
      $isColor: meta.type-of($color) == 'color';
      $isMap: meta.type-of($color) == 'map';
      $isAlpha: $forceAlpha or ($isColor and color.alpha($color) != 1);
  
      @if ($isMap) {
        @include define($color, $parent: $name);
      } @else if ($isColor) {
        $name-h: #{$name}#{var.$POSTFIX-HUE};
        $name-s: #{$name}#{var.$POSTFIX-SATURATION};
        $name-l: #{$name}#{var.$POSTFIX-LIGHTNESS};
        $name-a: #{$name}#{var.$POSTFIX-ALPHA};
  
        @if ($isAlpha) {
          #{$name}: sass-color.makeHSL(var($name-h), var($name-s), var($name-l), var($name-a));
        } @else {
          #{$name}: sass-color.makeHSL(var($name-h), var($name-s), var($name-l));
        }
  
        #{$name-h}: color.hue($color);
        #{$name-s}: color.saturation($color);
        #{$name-l}: color.lightness($color);
  
        @if ($isAlpha) {
          #{$name-a}: color.alpha($color);
        }

        $_alpha: map.merge($_alpha, (#{$name}: $isAlpha)) !global;
      } @else {
        #{$name}: $color;
      }
    }
  }
}
