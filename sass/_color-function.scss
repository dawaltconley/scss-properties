@use 'sass:color';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'var';
@use 'utils';
@use 'color' as sass-color;

$_colors: ();

@function _hasAlpha($colorName) {
  @if not map.has-key($_colors, $colorName) {
    @error '#{$colorName} is not a defined color.';
  }
  @return map.get($_colors, $colorName, 'alpha');
}

@function _getHueRelations($colorMap: $_colors) {
  @each $colorName1, $colorProps1 in $_colors {
    @each $colorName2, $colorProps2 in $_colors {
      @if ($colorName1 != $colorName2) and not map.has-key($colorProps1, $colorName2) {
        $hue1: color.hue(map.get($colorProps1, 'color'));
        $hue2: color.hue(map.get($colorProps2, 'color'));
        $inverted: math.abs($hue1 - $hue2) > 180deg;

        $colorMap: map.deep-merge($colorMap, (
          $colorName1: ($colorName2: $inverted),
          $colorName2: ($colorName1: $inverted)
        ));
      }
    }
  }
  @return $colorMap;
}

// also allow mixing different values by different weights?
@function mix($colorName1, $colorName2, $weight: 50%, $invert-hue: null) {
  $invert:           map.get($_colors, $colorName1, $colorName2);
  $invert:           if($invert-hue, not $invert, $invert);

  $hue-color:        utils.calcMix($colorName1, $colorName2, $weight, var.$POSTFIX-HUE, $modify: $invert and -360deg);
  $saturation-color: utils.calcMix($colorName1, $colorName2, $weight, var.$POSTFIX-SATURATION);
  $lightness-color:  utils.calcMix($colorName1, $colorName2, $weight, var.$POSTFIX-LIGHTNESS);
  $alpha-color:      utils.calcMixAlpha($colorName1, $colorName2, $weight, _hasAlpha($colorName1), _hasAlpha($colorName2));

  @return sass-color.makeHSL($hue: $hue-color, $saturation: $saturation-color, $lightness: $lightness-color, $alpha: $alpha-color);
}

@function adjust($colorName, $hue: null, $saturation: null, $lightness: null, $alpha: null) {
  $hue-color:        utils.calcProperty($hue, $colorName, var.$POSTFIX-HUE, var.$UNIT-DEG, var.$ADJUST);
  $saturation-color: utils.calcProperty($saturation, $colorName, var.$POSTFIX-SATURATION, var.$UNIT-PERCENT, var.$ADJUST);
  $lightness-color:  utils.calcProperty($lightness, $colorName, var.$POSTFIX-LIGHTNESS, var.$UNIT-PERCENT, var.$ADJUST);
  $alpha-color:      utils.calcPropertyAlpha($alpha, $colorName, var.$ADJUST, _hasAlpha($colorName));

  @return sass-color.makeHSL($hue: $hue-color, $saturation: $saturation-color, $lightness: $lightness-color, $alpha: $alpha-color);
}

@function change($colorName, $hue: null, $saturation: null, $lightness: null, $alpha: null) {
  $hue-color:        utils.calcProperty($hue, $colorName, var.$POSTFIX-HUE, var.$UNIT-DEG, var.$CHANGE);
  $saturation-color: utils.calcProperty($saturation, $colorName, var.$POSTFIX-SATURATION, var.$UNIT-PERCENT, var.$CHANGE);
  $lightness-color:  utils.calcProperty($lightness, $colorName, var.$POSTFIX-LIGHTNESS, var.$UNIT-PERCENT, var.$CHANGE);
  $alpha-color:      utils.calcPropertyAlpha($alpha, $colorName, var.$CHANGE, _hasAlpha($colorName));

  @return sass-color.makeHSL($hue: $hue-color, $saturation: $saturation-color, $lightness: $lightness-color, $alpha: $alpha-color);
};

@mixin define($colorMap, $parent: '', $forceAlpha: true) {
  @if (meta.type-of($colorMap) == 'map') {
    @each $colorName in map.keys($colorMap) {
      $name: #{$parent}#{$colorName};
  
      @if ($colorName == 'color') {
        $name: #{$parent};
      }
  
      $color: map.get($colorMap, $colorName);
  
      $isColor: meta.type-of($color) == 'color';
      $isMap: meta.type-of($color) == 'map';
      $isAlpha: $forceAlpha or ($isColor and color.alpha($color) != 1);
  
      @if ($isMap) {
        @include define($color, $parent: $name);
      } @else if ($isColor) {
        $name-h: #{$name}#{var.$POSTFIX-HUE};
        $name-s: #{$name}#{var.$POSTFIX-SATURATION};
        $name-l: #{$name}#{var.$POSTFIX-LIGHTNESS};
        $name-a: #{$name}#{var.$POSTFIX-ALPHA};
  
        @if ($isAlpha) {
          #{$name}: sass-color.makeHSL(var($name-h), var($name-s), var($name-l), var($name-a));
        } @else {
          #{$name}: sass-color.makeHSL(var($name-h), var($name-s), var($name-l));
        }
  
        #{$name-h}: color.hue($color);
        #{$name-s}: color.saturation($color);
        #{$name-l}: color.lightness($color);
  
        @if ($isAlpha) {
          #{$name-a}: color.alpha($color);
        }

        $_colors: map.merge($_colors, (#{$name}: (
          'color': $color,
          'alpha': $isAlpha
        ))) !global;
        $_colors: _getHueRelations($_colors) !global;
        @debug $_colors;
      } @else {
        #{$name}: $color;
      }
    }
  }
}
