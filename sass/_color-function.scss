@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'var';
@use 'utils';
@use 'color' as sass-color;

@function _compatible($value, $property, $type: null) {
  $unit: map.get(var.$PROPERTIES, $property, 'unit');
  $isNumber: meta.type-of($value) == 'number';
  $unitTest: $isNumber and math.is-unitless($value);
  @if ($isNumber and not math.is-unitless($unit)) {
    $unitTest: $unitTest or math.compatible($value, $unit);
  }
  @if ($isNumber) {
    $min: map.get(var.$PROPERTIES, $property, 'min');
    $max: map.get(var.$PROPERTIES, $property, 'max');
    $allowNegative: $type and $type == var.$ADJUST or $type == var.$SCALE;
    $rangeValue: if($allowNegative, math.abs($value), $value);
    $unitTest: $unitTest and $min < $rangeValue and $rangeValue < $max;
  }
  @return meta.type-of($value) == 'string' or $unitTest;
}

@function _validate($colors, $propValues: (), $type: null) {
  @each $colorName in $colors {
    @if not (meta.type-of($colorName) == 'string' and map.has-key(var.$COLORS, $colorName)) {
      @error '#{$colorName} is not a defined color.';
    }
  }
  @each $prop, $value in $propValues {
    @if $value and not _compatible($value, $prop, $type) {
      @error 'Invalid #{$prop} value for #{$type} function: #{$value}';
    }
  }
  @return true;
}

@function _invertHue($colorName1, $colorName2) {
  $color1: map.get(var.$COLORS, $colorName1, 'color');
  $color2: map.get(var.$COLORS, $colorName2, 'color');
  @return math.abs(color.hue($color1) - color.hue($color2)) > 180deg;
}

@function mix($colorName1, $colorName2, $weight: 50%, $red: null, $green: null, $blue: null, $alpha: null) {
  @return sass-color.makeColor(
    $red:   utils.calcMix($colorName1, $colorName2, $red or $weight, var.$RED),
    $green: utils.calcMix($colorName1, $colorName2, $green or $weight, var.$GREEN),
    $blue:  utils.calcMix($colorName1, $colorName2, $blue or $weight, var.$BLUE),
    $alpha: utils.calcMix($colorName1, $colorName2, $alpha or $weight, var.$ALPHA),
  );
}

@function _calcProperties($colorName, $function, $args...) {
  $kwargs: utils.formatArgList($args...);
  $valid: _validate($colorName, $kwargs, $function);
  $ops: ();
  @each $property, $value in $kwargs {
    @if $value {
      $ops: map.set($ops, $property, utils.calcProperty($value, $colorName, $property, $function));
    }
  }
  @return $ops;
}

@function _calcColor($colorName, $function, $args...) {
  $properties: _calcProperties($colorName, $function, $args...);
  $defaults: map.get(var.$COLORS, $colorName, 'defaults');
  $properties: map.merge($defaults, $properties);
  @return sass-color.makeColor($properties...);
}

@function adjust($colorName, $args...) {
  @return _calcColor($colorName, var.$ADJUST, $args...);
}

@function change($colorName, $args...) {
  @return _calcColor($colorName, var.$CHANGE, $args...);
};

@function scale($colorName, $args...) {
  @return _calcColor($colorName, var.$SCALE, $args...);
};

@function _parseSetArg($arg) {
  $property: map.has-key(var.$PROPERTIES, $arg) and $arg;
  $func: list.index(var.$FUNCTIONS, $arg) and $arg;
  @if not $property and not $func {
    @error 'Bad argument for set function: #{$arg}';
  }
  @return $property, $func;
}

// could simplify if I changed the previous function outputs and used meta.call
@function _getOperation($colorName, $property: null, $type: null, $settings: null) {
  @if not $property {
    @error 'Must specify color property: #{$property} #{$type} #{$settings}';
  }
  @if not $type {
    @error 'Must specify modification type: #{$property} #{$type} #{$settings}';
  }
  @if $type == 'mix' {
    $colorName2: list.nth($settings, 1); // allow map as well
    $weight: list.nth($settings, 2) or 50%;
    $valid: _validate(($colorName, $colorName2), ('weight': $weight), $type: 'mix');
    $invert: $property == var.$HUE and _invertHue($colorName, $colorName2);
    // invert option
    @return utils.calcMix($colorName, $colorName2, $weight, $property, $modify: $invert and -360deg);
  } @else {
    $param: list.nth($settings, 1);
    $valid: _validate($colorName, (#{$property}: $param), $type);
    @return utils.calcProperty($param, $colorName, $property, $type);
  }
}

@function set($colorName, $setMap: null, $argList...) {
  @if not $setMap {
    @return set($colorName, meta.keywords($argList));
  }

  $ops: ();
  @each $key1, $value in $setMap {
    $arg1: _parseSetArg($key1);
    @if meta.type-of($value) == 'list' and meta.type-of(list.nth($value, 1) != 'list') {
      $settings: ();
      @for $i from 2 through list.length($value) {
        $settings: list.append($settings, list.nth($value, $i));
      }
      $value: (#{list.nth($value, 1)}: $settings);
    }
    // @if meta.type-of($value) == 'map' {
    //   $value: list.zip(map.keys($value), map.values($value));
    // }
    @each $key2, $settings in $value {
      $arg2: _parseSetArg($key2);
      $property: list.nth($arg1, 1) or list.nth($arg2, 1);
      $type: list.nth($arg1, 2) or list.nth($arg2, 2);
      $ops: map.set($ops, $property, _getOperation($colorName, $property, $type, $settings));
    }
  }

  $defaults: map.get(var.$COLORS, $colorName, 'defaults');
  $properties: map.merge($defaults, $ops);
  @return sass-color.makeColor($properties...);
}

@mixin define($colorMap, $parent: '', $forceAlpha: true) {
  @if (meta.type-of($colorMap) == 'map') {
    @each $colorName in map.keys($colorMap) {
      $name: #{$parent}#{$colorName};
  
      @if ($colorName == 'color') {
        $name: #{$parent};
      }
  
      $color: map.get($colorMap, $colorName);
  
      $isColor: meta.type-of($color) == 'color';
      $isMap: meta.type-of($color) == 'map';
      $priorAlpha: map.get(var.$COLORS, $colorName, 'alpha');
      $isAlpha: $forceAlpha or $priorAlpha or ($isColor and color.alpha($color) != 1);
  
      @if ($isMap) {
        @include define($color, $parent: $name);
      } @else if ($isColor) {
        $name-r: #{$name}#{var.$POSTFIX-RED};
        $name-g: #{$name}#{var.$POSTFIX-GREEN};
        $name-b: #{$name}#{var.$POSTFIX-BLUE};
        $name-h: #{$name}#{var.$POSTFIX-HUE};
        $name-s: #{$name}#{var.$POSTFIX-SATURATION};
        $name-l: #{$name}#{var.$POSTFIX-LIGHTNESS};
        $name-a: #{$name}#{var.$POSTFIX-ALPHA};
  
        $defaults: (
          #{var.$HUE}: var($name-h),
          #{var.$SATURATION}: var($name-s),
          #{var.$LIGHTNESS}: var($name-l)
        );
        @if ($isAlpha) {
          $defaults: map.set($defaults, var.$ALPHA, var($name-a));
        }
  
        #{$name}: sass-color.makeColor($defaults...);
        #{$name-r}: color.red($color);
        #{$name-g}: color.green($color);
        #{$name-b}: color.blue($color);
        #{$name-h}: color.hue($color);
        #{$name-s}: color.saturation($color);
        #{$name-l}: color.lightness($color);
        @if ($isAlpha) {
          #{$name-a}: color.alpha($color);
        }

        var.$COLORS: map.set(var.$COLORS, $name, (
          'color': $color,
          'alpha': $isAlpha,
          'defaults': $defaults
        ));
      } @else {
        #{$name}: $color;
      }
    }
  }
}
