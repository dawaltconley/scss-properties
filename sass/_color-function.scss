@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'var';
@use 'utils';
@use 'color' as sass-color;

$_colors: ();

@function _compatible($value, $property, $type: null) {
  $unit: map.get(var.$PROPERTIES, $property, 'unit');
  $isNumber: meta.type-of($value) == 'number';
  $unitTest: $isNumber and math.is-unitless($value);
  @if ($isNumber and not math.is-unitless($unit)) {
    $unitTest: $unitTest or math.compatible($value, $unit);
  }
  @if ($isNumber) {
    $min: map.get(var.$PROPERTIES, $property, 'min');
    $max: map.get(var.$PROPERTIES, $property, 'max');
    $allowNegative: $type and $type == var.$ADJUST or $type == var.$SCALE;
    $rangeValue: if($allowNegative, math.abs($value), $value);
    $unitTest: $unitTest and $min < $rangeValue and $rangeValue < $max;
  }
  @return meta.type-of($value) == 'string' or $unitTest;
}

@function _validate($colors, $propValues: (), $type: null) {
  @each $colorName in $colors {
    @if not (meta.type-of($colorName) == 'string' and map.has-key($_colors, $colorName)) {
      @error '#{$colorName} is not a defined color.';
    }
  }
  @each $prop, $value in $propValues {
    @if $value and not _compatible($value, $prop, $type) {
      @error 'Invalid #{$prop} value for #{$type} function: #{$value}';
    }
  }
  @return true;
}

@function _calcAlpha($alpha, $colorName, $type) {
  @if not $alpha or $alpha == 1 {
    @return null;
  }

  @if map.get($_colors, $colorName, 'alpha') {
    @return utils.calcProperty($alpha, $colorName, 'alpha', $type);
  } @else {
    $newAlpha: $alpha;
    $min: map.get(var.$PROPERTIES, 'alpha', 'min');
    $max: map.get(var.$PROPERTIES, 'alpha', 'max');

    @if (type == var.$ADJUST) {
      $newAlpha: 1 + $alpha;
    } @else if ($type == var.$CHANGE) {
      $newAlpha: $alpha;
    } @else if ($type == var.$SCALE) {
      $newAlpha: 1 + math.div($alpha / 100%);
    }

    @return math.clamp($min, $newAlpha, $max);
  }
}

@function _mixAlpha($colorName1, $colorName2, $weight) {
  $hasAlpha1: map.get($_colors, $colorName1, 'alpha');
  $hasAlpha2: map.get($_colors, $colorName2, 'alpha');
  $max: map.get(var.$PROPERTIES, 'alpha', 'max');
  $var1: if($hasAlpha1, $colorName1, $max);
  $var2: if($hasAlpha2, $colorName2, $max);

  @if not $hasAlpha1 and not $hasAlpha2 {
    @return null;
  }
  @return utils.calcMix($var1, $var2, $weight, 'alpha')
}

@function _invertHue($colorName1, $colorName2) {
  $color1: map.get($_colors, $colorName1, 'color');
  $color2: map.get($_colors, $colorName2, 'color');
  @return math.abs(color.hue($color1) - color.hue($color2)) > 180deg;
}

// also allow mixing different values by different weights?
@function mix($colorName1, $colorName2, $weight: 50%, $hue: null, $saturation: null, $lightness: null, $alpha: null, $invert-hue: null) {
  $valid: _validate(($colorName1, $colorName2), ('weight' $weight, 'weight' $hue, 'weight' $saturation, 'weight' $lightness, 'weight' $alpha), $type: 'mix');
  $invert: _invertHue($colorName1, $colorName2);
  $invert: if($invert-hue, not $invert, $invert);
  @return sass-color.makeHSL(
    $hue:         utils.calcMix($colorName1, $colorName2, $hue or $weight, 'hue', $modify: $invert and -360deg),
    $saturation:  utils.calcMix($colorName1, $colorName2, $saturation or $weight, 'saturation'),
    $lightness:   utils.calcMix($colorName1, $colorName2, $lightness or $weight, 'lightness'),
    $alpha:       _mixAlpha($colorName1, $colorName2, $alpha or $weight),
  );
}

@function adjust($colorName, $hue: null, $saturation: null, $lightness: null, $alpha: null) {
  $valid: _validate($colorName, ('hue': $hue, 'saturation': $saturation, 'lightness': $lightness, 'alpha': $alpha), $type: var.$ADJUST);
  @return sass-color.makeHSL(
    $hue:         utils.calcProperty($hue, $colorName, 'hue', var.$ADJUST),
    $saturation:  utils.calcProperty($saturation, $colorName, 'saturation', var.$ADJUST),
    $lightness:   utils.calcProperty($lightness, $colorName, 'lightness', var.$ADJUST),
    $alpha:       _calcAlpha($alpha, $colorName, var.$ADJUST),
  );
}

@function change($colorName, $hue: null, $saturation: null, $lightness: null, $alpha: null) {
  $valid: _validate($colorName, ('hue': $hue, 'saturation': $saturation, 'lightness': $lightness, 'alpha': $alpha), $type: var.$CHANGE);
  @return sass-color.makeHSL(
    $hue:         utils.calcProperty($hue, $colorName, 'hue', var.$CHANGE),
    $saturation:  utils.calcProperty($saturation, $colorName, 'saturation', var.$CHANGE),
    $lightness:   utils.calcProperty($lightness, $colorName, 'lightness', var.$CHANGE),
    $alpha:       _calcAlpha($alpha, $colorName, var.$CHANGE),
  );
};

@function scale($colorName, $saturation: null, $lightness: null, $alpha: null) {
  $valid: _validate($colorName, ('saturation': $saturation, 'lightness': $lightness, 'alpha': $alpha), $type: var.$SCALE);
  @return sass-color.makeHSL(
    $hue:         utils.postfix($colorName, 'hue'),
    $saturation:  utils.calcProperty($saturation, $colorName, 'saturation', var.$SCALE),
    $lightness:   utils.calcProperty($lightness, $colorName, 'lightness', var.$SCALE),
    $alpha:       _calcAlpha($alpha, $colorName, var.$SCALE),
  );
};

$_functionTypes: var.$ADJUST, var.$CHANGE, var.$SCALE, 'mix';
@function _parseSetArg($arg) {
  $property: map.has-key(var.$PROPERTIES, $arg) and $arg;
  $func: list.index($_functionTypes, $arg) and $arg;
  @if not $property and not $func {
    @error 'Bad argument for set function: #{$arg}';
  }
  @return $property, $func;
}

// could simplify if I changed the previous function outputs and used meta.call
@function _getOperation($colorName, $property: null, $type: null, $settings: null) {
  @if not $property {
    @error 'Must specify color property: #{$property} #{$type} #{$settings}';
  }
  @if not $type {
    @error 'Must specify modification type: #{$property} #{$type} #{$settings}';
  }
  @if $type == 'mix' {
    $colorName2: list.nth($settings, 1); // allow map as well
    $weight: list.nth($settings, 2) or 50%;
    $valid: _validate(($colorName, $colorName2), ('weight': $weight), $type: 'mix');
    @if $property == 'alpha' {
      @return _mixAlpha($colorName, $colorName2, $weight);
    } @else {
      $invert: $property == 'hue' and _invertHue($colorName, $colorName2);
      // invert option
      @return utils.calcMix($colorName, $colorName2, $weight, $property, $modify: $invert and -360deg);
    }
  } @else {
    $param: list.nth($settings, 1);
    $valid: _validate($colorName, (#{$property}: $param), $type);
    @if $property == 'alpha' {
      @return _calcAlpha($param, $colorName, $type);
    } @else {
      @return utils.calcProperty($param, $colorName, $property, $type);
    }
  }
}

@function set( $colorName, $setMap: null, $argList...) {
  @if not $setMap {
    @return set($colorName, meta.keywords($argList));
  }

  $ops: ();
  @each $key1, $value in $setMap {
    $arg1: _parseSetArg($key1);
    @if meta.type-of($value) == 'list' and meta.type-of(list.nth($value, 1) != 'list') {
      $settings: ();
      @for $i from 2 through list.length($value) {
        $settings: list.append($settings, list.nth($value, $i));
      }
      $value: (#{list.nth($value, 1)}: $settings);
    }
    // @if meta.type-of($value) == 'map' {
    //   $value: list.zip(map.keys($value), map.values($value));
    // }
    @each $key2, $settings in $value {
      $arg2: _parseSetArg($key2);
      $property: list.nth($arg1, 1) or list.nth($arg2, 1);
      $type: list.nth($arg1, 2) or list.nth($arg2, 2);
      $ops: map.set($ops, $property, _getOperation($colorName, $property, $type, $settings));
    }
  }

  @return sass-color.makeHSL(
    $hue:         map.get($ops, 'hue') or utils.postfix($colorName, 'hue'),
    $saturation:  map.get($ops, 'saturation') or utils.postfix($colorName, 'saturation'),
    $lightness:   map.get($ops, 'lightness') or utils.postfix($colorName, 'lightness'),
    $alpha:       map.get($ops, 'alpha') or map.get($_colors, $colorName, 'alpha') and utils.postfix($colorName, 'alpha'),
  );
}

@mixin define($colorMap, $parent: '', $forceAlpha: true) {
  @if (meta.type-of($colorMap) == 'map') {
    @each $colorName in map.keys($colorMap) {
      $name: #{$parent}#{$colorName};
  
      @if ($colorName == 'color') {
        $name: #{$parent};
      }
  
      $color: map.get($colorMap, $colorName);
  
      $isColor: meta.type-of($color) == 'color';
      $isMap: meta.type-of($color) == 'map';
      $isAlpha: $forceAlpha or ($isColor and color.alpha($color) != 1);
  
      @if ($isMap) {
        @include define($color, $parent: $name);
      } @else if ($isColor) {
        $name-h: #{$name}#{var.$POSTFIX-HUE};
        $name-s: #{$name}#{var.$POSTFIX-SATURATION};
        $name-l: #{$name}#{var.$POSTFIX-LIGHTNESS};
        $name-a: #{$name}#{var.$POSTFIX-ALPHA};
  
        @if ($isAlpha) {
          #{$name}: sass-color.makeHSL(var($name-h), var($name-s), var($name-l), var($name-a));
        } @else {
          #{$name}: sass-color.makeHSL(var($name-h), var($name-s), var($name-l));
        }
  
        #{$name-h}: color.hue($color);
        #{$name-s}: color.saturation($color);
        #{$name-l}: color.lightness($color);
  
        @if ($isAlpha) {
          #{$name-a}: color.alpha($color);
        }

        $_colors: map.merge($_colors, (#{$name}: (
          'color': $color,
          'alpha': $isAlpha
        ))) !global;
      } @else {
        #{$name}: $color;
      }
    }
  }
}
