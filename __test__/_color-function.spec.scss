@use '../node_modules/sass-true/sass/true' as *;

@use 'sass:color';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';
@use '../sass/var' with (
  $POSTFIX-HUE: '-h',
  $POSTFIX-SATURATION: '-s',
  $POSTFIX-LIGHTNESS: '-l',
  $POSTFIX-ALPHA: '-a',
);
@use '../sass/color-function' as color-prop;
@use '../sass/utils';

@include describe('User functions') {
  @include describe('define') {

    @include it('defines hsla properties using hsl values') {
      @include assert {
        @include output {
          @include color-prop.define((
          --color: hsl(131deg, 53%, 91%)
          ));
        }
        @include expect {
          --color: hsla(var(--color-h), var(--color-s), var(--color-l), var(--color-a));
          --color-r: 220;
          --color-g: 244;
          --color-b: 224;
          --color-h: 131deg;
          --color-s: 53%;
          --color-l: 91%;
          --color-a: 1;
        }
      }
    }

    @include it('defines hsla properties using hex values') {
      @include assert {
        @include output {
          @include color-prop.define((
          --color: #bf89c2
          ));
        }
        @include expect {
          --color: hsla(var(--color-h), var(--color-s), var(--color-l), var(--color-a));
          --color-r: 191;
          --color-g: 137;
          --color-b: 194;
          --color-h: 296.8421052632deg;
          --color-s: 31.843575419%;
          --color-l: 64.9019607843%;
          --color-a: 1;
        }
      }
    }

    @include it('defines hsla properties using hsla values') {
      @include assert {
        @include output {
          @include color-prop.define((
          --color: hsla(211deg, 96%, 28%, 0.71)
          ));
        }
        @include expect {
          --color: hsla(var(--color-h), var(--color-s), var(--color-l), var(--color-a));
          --color-r: 3;
          --color-g: 69;
          --color-b: 140;
          --color-h: 211deg;
          --color-s: 96%;
          --color-l: 28%;
          --color-a: 0.71;
        }
      }
    }

    @include it('defines hsla properties using hex values') {
      @include assert {
        @include output {
          @include color-prop.define((
          --color: #22242b9e
          ));
        }
        @include expect {
          --color: hsla(var(--color-h), var(--color-s), var(--color-l), var(--color-a));
          --color-r: 34;
          --color-g: 36;
          --color-b: 43;
          --color-h: 226.6666666667deg;
          --color-s: 11.6883116883%;
          --color-l: 15.0980392157%;
          --color-a: 0.6196078431;
        }
      }
    }

    @include it('defines hsl properties using hsl with $forceAlpha') {
      @include assert {
        @include output {
          @include color-prop.define((
          --no-alpha: hsl(150deg, 93%, 17%)
          ), $forceAlpha: false);
        }
        @include expect {
          --no-alpha: hsl(var(--no-alpha-h), var(--no-alpha-s), var(--no-alpha-l));
          --no-alpha-r: 3;
          --no-alpha-g: 84;
          --no-alpha-b: 43;
          --no-alpha-h: 150deg;
          --no-alpha-s: 93%;
          --no-alpha-l: 17%;
        }
      }
    }

    @include it('defines hsl properties using hex with $forceAlpha') {
      @include assert {
        @include output {
          @include color-prop.define((
          --no-alpha: #cb2541
          ), $forceAlpha: false);
        }
        @include expect {
          --no-alpha: hsl(var(--no-alpha-h), var(--no-alpha-s), var(--no-alpha-l));
          --no-alpha-r: 203;
          --no-alpha-g: 37;
          --no-alpha-b: 65;
          --no-alpha-h: 349.8795180723deg;
          --no-alpha-s: 69.1666666667%;
          --no-alpha-l: 47.0588235294%;
        }
      }
    }

    @include it('defines multiple colors') {
      @include assert {
        @include output {
          @include color-prop.define((
          --light: #da0,
          --dark: rgba(#040, 0.5),
          --brand: #e7d20d
          ), $forceAlpha: false);
        }
        @include expect {
          --light: hsl(var(--light-h), var(--light-s), var(--light-l));
          --light-r: 221;
          --light-g: 170;
          --light-b: 0;
          --light-h: 46.1538461538deg;
          --light-s: 100%;
          --light-l: 43.3333333333%;
          --dark: hsla(var(--dark-h), var(--dark-s), var(--dark-l), var(--dark-a));
          --dark-r: 0;
          --dark-g: 68;
          --dark-b: 0;
          --dark-h: 120deg;
          --dark-s: 100%;
          --dark-l: 13.3333333333%;
          --dark-a: 0.5;
          --brand: hsl(var(--brand-h), var(--brand-s), var(--brand-l));
          --brand-r: 231;
          --brand-g: 210;
          --brand-b: 13;
          --brand-h: 54.2201834862deg;
          --brand-s: 89.3442622951%;
          --brand-l: 47.8431372549%;
        }
      }
    }

    @include it('defines nested colors') {
      @include assert {
        @include output {
          @include color-prop.define((
          --brand: (
          color: #aaa092,
          --light: #c3bcb3,
          --dark: #7c7061
          )
          ));
        }
        @include expect {
          --brand: hsla(var(--brand-h), var(--brand-s), var(--brand-l), var(--brand-a));
          --brand-r: 170;
          --brand-g: 160;
          --brand-b: 146;
          --brand-h: 35deg;
          --brand-s: 12.3711340206%;
          --brand-l: 61.9607843137%;
          --brand-a: 1;
          --brand--light: hsla(var(--brand--light-h), var(--brand--light-s), var(--brand--light-l), var(--brand--light-a));
          --brand--light-r: 195;
          --brand--light-g: 188;
          --brand--light-b: 179;
          --brand--light-h: 33.75deg;
          --brand--light-s: 11.7647058824%;
          --brand--light-l: 73.3333333333%;
          --brand--light-a: 1;
          --brand--dark: hsla(var(--brand--dark-h), var(--brand--dark-s), var(--brand--dark-l), var(--brand--dark-a));
          --brand--dark-r: 124;
          --brand--dark-g: 112;
          --brand--dark-b: 97;
          --brand--dark-h: 33.3333333333deg;
          --brand--dark-s: 12.2171945701%;
          --brand--dark-l: 43.3333333333%;
          --brand--dark-a: 1;
        }
      }
    }
  }

  .test {
    @include color-prop.define((
    --color: hsl(150deg, 93%, 17%)
    ));
  }

  @include describe('adjust') {
    @include it('adjusts red correctly') {
      $output: color-prop.adjust(--color, $red: 74);
      $expect: 'rgba(calc(var(--color-r) + 74), var(--color-g), var(--color-b), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts green correctly') {
      $output: color-prop.adjust(--color, $green: -139.829);
      $expect: 'rgba(var(--color-r), calc(var(--color-g) + -139.829), var(--color-b), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts blue correctly') {
      $output: color-prop.adjust(--color, $blue: 500 * 0.14);
      $expect: 'rgba(var(--color-r), var(--color-g), calc(var(--color-b) + 70), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts hue correctly') {
      $output: color-prop.adjust(--color, $hue: -40);
      $expect: 'hsla(calc(var(--color-h) + -40deg), var(--color-s), var(--color-l), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts saturation correctly') {
      $output: color-prop.adjust(--color, $saturation: 27.4);
      $expect: 'hsla(var(--color-h), calc(var(--color-s) + 27.4%), var(--color-l), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts lightness correctly') {
      $output: color-prop.adjust(--color, $lightness: -74%);
      $expect: 'hsla(var(--color-h), var(--color-s), calc(var(--color-l) + -74%), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts alpha correctly') {
      $output: color-prop.adjust(--color, $alpha: -0.294);
      $expect: 'hsla(var(--color-h), var(--color-s), var(--color-l), calc(var(--color-a) + -0.294))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts multiple rgba values using kwargs') {
      $output: color-prop.adjust(--color, $green: -33, $alpha: -0.4);
      $expect: 'rgba(var(--color-r), calc(var(--color-g) + -33), var(--color-b), calc(var(--color-a) + -0.4))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts multiple rgba values using positional args') {
      $output: color-prop.adjust(--color, -33, 140, 2);
      $expect: 'rgba(calc(var(--color-r) + -33), calc(var(--color-g) + 140), calc(var(--color-b) + 2), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts multiple rgba values using mixed args') {
      $output: color-prop.adjust(--color, 59 + 1, $alpha: -0.2);
      $expect: 'rgba(calc(var(--color-r) + 60), var(--color-g), var(--color-b), calc(var(--color-a) + -0.2))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts multiple hsla values using kwargs') {
      $output: color-prop.adjust(--color, $saturation: -33%, $alpha: -0.4);
      $expect: 'hsla(var(--color-h), calc(var(--color-s) + -33%), var(--color-l), calc(var(--color-a) + -0.4))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts multiple hsla values using positional args') {
      $output: color-prop.adjust(--color, -33deg, -40%, 2%);
      $expect: 'hsla(calc(var(--color-h) + -33deg), calc(var(--color-s) + -40%), calc(var(--color-l) + 2%), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('adjusts multiple hsla values using mixed args') {
      $output: color-prop.adjust(--color, 1deg, $alpha: -0.2);
      $expect: 'hsla(calc(var(--color-h) + 1deg), var(--color-s), var(--color-l), calc(var(--color-a) + -0.2))';
      @include assert-equal($output, $expect);
    }
  }

  @include describe('change') {
    @include it('changes red correctly') {
      $output: color-prop.change(--color, $red: 74);
      $expect: 'rgba(74, var(--color-g), var(--color-b), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('changes green correctly') {
      $output: color-prop.change(--color, $green: 139.829);
      $expect: 'rgba(var(--color-r), 139.829, var(--color-b), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('changes blue correctly') {
      $output: color-prop.change(--color, $blue: 500 * 0.14);
      $expect: 'rgba(var(--color-r), var(--color-g), 70, var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('changes hue correctly') {
      $output: color-prop.change(--color, $hue: 40);
      $expect: 'hsla(40deg, var(--color-s), var(--color-l), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('changes saturation correctly') {
      $output: color-prop.change(--color, $saturation: 27.4);
      $expect: 'hsla(var(--color-h), 27.4%, var(--color-l), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('changes lightness correctly') {
      $output: color-prop.change(--color, $lightness: 74%);
      $expect: 'hsla(var(--color-h), var(--color-s), 74%, var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('changes alpha correctly') {
      $output: color-prop.change(--color, $alpha: 0.294);
      $expect: 'hsla(var(--color-h), var(--color-s), var(--color-l), 0.294)';
      @include assert-equal($output, $expect);
    }
    @include it('changes multiple rgba values using kwargs') {
      $output: color-prop.change(--color, $green: 33, $alpha: 0.4);
      $expect: 'rgba(var(--color-r), 33, var(--color-b), 0.4)';
      @include assert-equal($output, $expect);
    }
    @include it('changes multiple rgba values using positional args') {
      $output: color-prop.change(--color, 33, 140, 2);
      $expect: 'rgba(33, 140, 2, var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('changes multiple rgba values using mixed args') {
      $output: color-prop.change(--color, 59 + 1, $alpha: 0.2);
      $expect: 'rgba(60, var(--color-g), var(--color-b), 0.2)';
      @include assert-equal($output, $expect);
    }
    @include it('changes multiple hsla values using kwargs') {
      $output: color-prop.change(--color, $saturation: 33%, $alpha: 0.4);
      $expect: 'hsla(var(--color-h), 33%, var(--color-l), 0.4)';
      @include assert-equal($output, $expect);
    }
    @include it('changes multiple hsla values using positional args') {
      $output: color-prop.change(--color, 33, 40%, 2%);
      $expect: 'hsla(33deg, 40%, 2%, var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('changes multiple hsla values using mixed args') {
      $output: color-prop.change(--color, 1deg, $alpha: 0.2);
      $expect: 'hsla(1deg, var(--color-s), var(--color-l), 0.2)';
      @include assert-equal($output, $expect);
    }
  }

  @include describe('scale') {
    @include it('scales red correctly') {
      $output: color-prop.scale(--color, $red: 74%);
      $expect: 'rgba(calc(var(--color-r) + ((255 - var(--color-r)) * 0.74)), var(--color-g), var(--color-b), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('scales green correctly') {
      $output: color-prop.scale(--color, $green: -39.829%);
      $expect: 'rgba(var(--color-r), calc(var(--color-g) + ((var(--color-g) - 0) * -0.39829)), var(--color-b), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('scales blue correctly') {
      $output: color-prop.scale(--color, $blue: 500% * 0.14);
      $expect: 'rgba(var(--color-r), var(--color-g), calc(var(--color-b) + ((255 - var(--color-b)) * 0.7)), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('scales hue correctly') {
      $output: color-prop.scale(--color, $hue: -40%);
      $expect: 'hsla(calc(var(--color-h) + ((var(--color-h) - 0deg) * -0.4)), var(--color-s), var(--color-l), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('scales saturation correctly') {
      $output: color-prop.scale(--color, $saturation: 27.4%);
      $expect: 'hsla(var(--color-h), calc(var(--color-s) + ((100% - var(--color-s)) * 0.274)), var(--color-l), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('scales lightness correctly') {
      $output: color-prop.scale(--color, $lightness: -74%);
      $expect: 'hsla(var(--color-h), var(--color-s), calc(var(--color-l) + ((var(--color-l) - 0%) * -0.74)), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('scales alpha correctly') {
      $output: color-prop.scale(--color, $alpha: 2.94%);
      $expect: 'hsla(var(--color-h), var(--color-s), var(--color-l), calc(var(--color-a) + ((1 - var(--color-a)) * 0.0294)))';
      @include assert-equal($output, $expect);
    }
    @include it('scales multiple rgba values using kwargs') {
      $output: color-prop.scale(--color, $green: 33%, $alpha: -4%);
      $expect: 'rgba(var(--color-r), calc(var(--color-g) + ((255 - var(--color-g)) * 0.33)), var(--color-b), calc(var(--color-a) + ((var(--color-a) - 0) * -0.04)))';
      @include assert-equal($output, $expect);
    }
    @include it('scales multiple rgba values using mixed args') {
      $output: color-prop.scale(--color, 50%, $blue: -10%, $alpha: 22%);
      $expect: 'rgba(calc(var(--color-r) + ((255 - var(--color-r)) * 0.5)), var(--color-g), calc(var(--color-b) + ((var(--color-b) - 0) * -0.1)), calc(var(--color-a) + ((1 - var(--color-a)) * 0.22)))';
      @include assert-equal($output, $expect);
    }
    @include it('scales multiple hsla values using kwargs') {
      $output: color-prop.scale(--color, $saturation: 33%, $alpha: -4%);
      $expect: 'hsla(var(--color-h), calc(var(--color-s) + ((100% - var(--color-s)) * 0.33)), var(--color-l), calc(var(--color-a) + ((var(--color-a) - 0) * -0.04)))';
      @include assert-equal($output, $expect);
    }
    @include it('scales multiple hsla values using positional args') {
      $output: color-prop.scale(--color, 33%, -40%, 2%);
      $expect: 'hsla(calc(var(--color-h) + ((360deg - var(--color-h)) * 0.33)), calc(var(--color-s) + ((var(--color-s) - 0%) * -0.4)), calc(var(--color-l) + ((100% - var(--color-l)) * 0.02)), var(--color-a))';
      @include assert-equal($output, $expect);
    }
    @include it('scales multiple hsla values using mixed args') {
      $output: color-prop.scale(--color, -50%, $lightness: -20%);
      $expect: 'hsla(calc(var(--color-h) + ((var(--color-h) - 0deg) * -0.5)), var(--color-s), calc(var(--color-l) + ((var(--color-l) - 0%) * -0.2)), var(--color-a))';
      @include assert-equal($output, $expect);
    }
  }
}
